# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MXOsYZgZZKjegNv276KPW2ZE8iHXImmi

# Set up the environment
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Install required libraries"""

!pip install torch torchvision albumentations

#Import librrires
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

"""# Data preperation"""

# Clone the repository
!git clone https://github.com/mvaldenegro/marine-debris-fls-datasets.git

!cp -r /content/marine-debris-fls-datasets /content/drive/MyDrive/

#verify the dataset
import os

data_path = "/content/drive/MyDrive/marine-debris-fls-datasets"
if os.path.exists(data_path):
    print("Dataset successfully loaded!")
    print("Contents of the dataset folder:")
    print(os.listdir(data_path))
else:
    print("Dataset not found. Please check the path.")

"""# Explore tne dataset"""

# Path to the dataset
dataset_path = "/content/marine-debris-fls-datasets/md_fls_dataset/data/watertank-segmentation"

# List files in the folder
image_files = sorted(os.listdir(os.path.join(dataset_path, "Images")))
mask_files = sorted(os.listdir(os.path.join(dataset_path, "Masks")))

print(f"Number of images: {len(image_files)}")
print(f"Number of masks: {len(mask_files)}")

# Display the first image and mask
image = cv2.imread(os.path.join(dataset_path, "Images", image_files[0]), cv2.IMREAD_GRAYSCALE)
mask = cv2.imread(os.path.join(dataset_path, "Masks", mask_files[0]), cv2.IMREAD_GRAYSCALE)

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.title("Image")
plt.imshow(image, cmap='gray')

plt.subplot(1, 2, 2)
plt.title("Mask")
plt.imshow(mask, cmap='jet')

plt.show()

"""# Preprocess the Data"""

# Define the target size
target_size = (256, 256)

import albumentations as A
# Define transformations
transform = A.Compose([
    A.Resize(target_size[0], target_size[1]),  # Resize images and masks
    A.Normalize(mean=(0.5), std=(0.5)),       # Normalize images to [-1, 1]
])

# Preprocess a single image and mask
def preprocess_image_mask(image_path, mask_path):
    # Load image and mask
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)

    # Apply transformations
    transformed = transform(image=image, mask=mask)
    image_transformed = transformed["image"]
    mask_transformed = transformed["mask"]

    return image_transformed, mask_transformed

# Example: Preprocess the first image and mask
image_path = os.path.join(dataset_path, "Images", image_files[0])
mask_path = os.path.join(dataset_path, "Masks", mask_files[0])

image_preprocessed, mask_preprocessed = preprocess_image_mask(image_path, mask_path)

# Display the preprocessed image and mask
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.title("Preprocessed Image")
plt.imshow(image_preprocessed, cmap='gray')

plt.subplot(1, 2, 2)
plt.title("Preprocessed Mask")
plt.imshow(mask_preprocessed, cmap='jet')

plt.show()

"""# Create a Custom Dataset"""

class MarineDebrisDataset(Dataset):
    def __init__(self, image_dir, mask_dir, transform=None):
        self.image_dir = image_dir
        self.mask_dir = mask_dir
        self.transform = transform
        self.image_files = sorted(os.listdir(image_dir))
        self.mask_files = sorted(os.listdir(mask_dir))

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, idx):
        # Load image and mask
        image_path = os.path.join(self.image_dir, self.image_files[idx])
        mask_path = os.path.join(self.mask_dir, self.mask_files[idx])

        image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)

        # Ensure mask values are valid
        mask = np.clip(mask, 0, 10)  # Ensure values are in [0, 10]

        # Apply transformations
        if self.transform:
            transformed = self.transform(image=image, mask=mask)
            image = transformed["image"]
            mask = transformed["mask"]

        # Convert to PyTorch tensors
        image = torch.tensor(image, dtype=torch.float32).unsqueeze(0)  # Add channel dimension
        mask = torch.tensor(mask, dtype=torch.long)  # Masks must be of type long

        return image, mask

# Create the dataset
dataset = MarineDebrisDataset(
    image_dir=os.path.join(dataset_path, "Images"),
    mask_dir=os.path.join(dataset_path, "Masks"),
    transform=transform,
)

# Create the DataLoader
dataloader = DataLoader(dataset, batch_size=8, shuffle=True)

# Load a batch of data
images, masks = next(iter(dataloader))

# Display the first image and mask in the batch
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.title("Image")
plt.imshow(images[0].squeeze(), cmap='gray')

plt.subplot(1, 2, 2)
plt.title("Mask")
plt.imshow(masks[0].squeeze(), cmap='jet')

plt.show()

"""# Verify the DataLoader"""

# Load a batch of data
images, masks = next(iter(dataloader))

# Display the first image and mask in the batch
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.title("Image")
plt.imshow(images[0].squeeze(), cmap='gray')

plt.subplot(1, 2, 2)
plt.title("Mask")
plt.imshow(masks[0].squeeze(), cmap='jet')

plt.show()

"""# Define the U-Net Model"""

import torch
import torch.nn as nn

class UNet(nn.Module):
    def __init__(self, in_channels=1, out_channels=11, init_features=32):
        super(UNet, self).__init__()

        features = init_features
        self.encoder1 = UNet._block(in_channels, features, name="enc1")
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.encoder2 = UNet._block(features, features * 2, name="enc2")
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.encoder3 = UNet._block(features * 2, features * 4, name="enc3")
        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.encoder4 = UNet._block(features * 4, features * 8, name="enc4")
        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.bottleneck = UNet._block(features * 8, features * 16, name="bottleneck")

        self.upconv4 = nn.ConvTranspose2d(
            features * 16, features * 8, kernel_size=2, stride=2
        )
        self.decoder4 = UNet._block((features * 8) * 2, features * 8, name="dec4")
        self.upconv3 = nn.ConvTranspose2d(
            features * 8, features * 4, kernel_size=2, stride=2
        )
        self.decoder3 = UNet._block((features * 4) * 2, features * 4, name="dec3")
        self.upconv2 = nn.ConvTranspose2d(
            features * 4, features * 2, kernel_size=2, stride=2
        )
        self.decoder2 = UNet._block((features * 2) * 2, features * 2, name="dec2")
        self.upconv1 = nn.ConvTranspose2d(
            features * 2, features, kernel_size=2, stride=2
        )
        self.decoder1 = UNet._block(features * 2, features, name="dec1")

        self.conv = nn.Conv2d(
            in_channels=features, out_channels=out_channels, kernel_size=1
        )

    def forward(self, x):
        enc1 = self.encoder1(x)
        enc2 = self.encoder2(self.pool1(enc1))
        enc3 = self.encoder3(self.pool2(enc2))
        enc4 = self.encoder4(self.pool3(enc3))

        bottleneck = self.bottleneck(self.pool4(enc4))

        dec4 = self.upconv4(bottleneck)
        dec4 = torch.cat((dec4, enc4), dim=1)
        dec4 = self.decoder4(dec4)

        dec3 = self.upconv3(dec4)
        dec3 = torch.cat((dec3, enc3), dim=1)
        dec3 = self.decoder3(dec3)

        dec2 = self.upconv2(dec3)
        dec2 = torch.cat((dec2, enc2), dim=1)
        dec2 = self.decoder2(dec2)

        dec1 = self.upconv1(dec2)
        dec1 = torch.cat((dec1, enc1), dim=1)
        dec1 = self.decoder1(dec1)

        return torch.sigmoid(self.conv(dec1))

    @staticmethod
    def _block(in_channels, features, name):
        return nn.Sequential(
            nn.Conv2d(
                in_channels=in_channels,
                out_channels=features,
                kernel_size=3,
                padding=1,
                bias=False,
            ),
            nn.BatchNorm2d(num_features=features),
            nn.ReLU(inplace=True),
            nn.Conv2d(
                in_channels=features,
                out_channels=features,
                kernel_size=3,
                padding=1,
                bias=False,
            ),
            nn.BatchNorm2d(num_features=features),
            nn.ReLU(inplace=True),
        )

# Initialize the model
model = UNet(in_channels=1, out_channels=11)  # 1 input channel (grayscale), 11 output classes
print(model)

"""# Set Up the Training Loop

**Weâ€™ll use Cross-Entropy Loss for multi-class segmentation and the Adam optimizer.**
"""

# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Check if GPU is available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Move the model to the GPU
model = model.to(device)

"""#


ConfusiCCffC
"""

# Check the maximum value in the masks tensor
max_value = masks.max().item()
print(f"Maximum value in masks: {max_value}")

num_epochs = 10  # You can adjust this valueimport torch.optim as optim

# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Move the model to the GPU
model = model.to(device)

# Training loop
for epoch in range(num_epochs):
    model.train()  # Set the model to training mode
    running_loss = 0.0

    for images, masks in dataloader:
        # Move data to the GPU (if available)
        images = images.to(device)
        masks = masks.to(device)

        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, masks.long())  # Masks must be of type long

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        # Update running loss
        running_loss += loss.item()

    # Print average loss for the epoch
    epoch_loss = running_loss / len(dataloader)
    print(f"Epoch [{epoch + 1}/{num_epochs}], Loss: {epoch_loss:.4f}")

"""# Evaluate the Model"""

def calculate_iou(preds, masks):
    # Convert predictions to binary masks
    preds = torch.argmax(preds, dim=1)  # Get the class with the highest probability
    preds = preds.view(-1)              # Flatten the predictions
    masks = masks.view(-1)              # Flatten the ground truth masks

    # Calculate intersection and union
    intersection = (preds == masks).sum().float()
    union = preds.shape[0]

    # Calculate IoU
    iou = intersection / union
    return iou

"""# Evaluate on the Validation Set"""

model.eval()  # Set the model to evaluation mode
total_iou = 0.0

with torch.no_grad():  # Disable gradient computation
    for images, masks in dataloader:
        # Move data to the GPU (if available)
        images = images.to(device)
        masks = masks.to(device)

        # Forward pass
        outputs = model(images)

        # Calculate IoU
        iou = calculate_iou(outputs, masks)
        total_iou += iou.item()

# Print average IoU
avg_iou = total_iou / len(dataloader)
print(f"Average IoU: {avg_iou:.4f}")

"""Save the Trained Model"""

# Save the model weights
torch.save(model.state_dict(), "/content/drive/MyDrive/marine-debris-fls-datasets/unet_model.pth")
print("Model saved!")

"""# Visualize Predictions"""

# Set the model to evaluation mode
model.eval()

# Get a batch of data
images, masks = next(iter(dataloader))

# Move data to the GPU (if available)
images = images.to(device)
masks = masks.to(device)

# Get predictions
with torch.no_grad():
    outputs = model(images)
    preds = torch.argmax(outputs, dim=1)  # Convert probabilities to class labels

# Move data back to CPU for visualization
images = images.cpu()
masks = masks.cpu()
preds = preds.cpu()

# Visualize the results
for i in range(len(images)):
    plt.figure(figsize=(15, 5))

    plt.subplot(1, 3, 1)
    plt.title("Input Image")
    plt.imshow(images[i].squeeze(), cmap='gray')

    plt.subplot(1, 3, 2)
    plt.title("Ground Truth Mask")
    plt.imshow(masks[i].squeeze(), cmap='jet')

    plt.subplot(1, 3, 3)
    plt.title("Predicted Mask")
    plt.imshow(preds[i].squeeze(), cmap='jet')

    plt.show()

# Store losses for each epoch
train_losses = []

# Training loop
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0

    for images, masks in dataloader:
        images = images.to(device)
        masks = masks.to(device)

        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, masks.long())

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        # Update running loss
        running_loss += loss.item()

    # Store the average loss for the epoch
    epoch_loss = running_loss / len(dataloader)
    train_losses.append(epoch_loss)
    print(f"Epoch [{epoch + 1}/{num_epochs}], Loss: {epoch_loss:.4f}")

# Plot the training loss curve
plt.plot(train_losses, label="Training Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.title("Training Loss Curve")
plt.legend()
plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns

# Initialize variables to store predictions and ground truth
all_preds = []
all_masks = []

# Evaluation loop
model.eval()
with torch.no_grad():
    for images, masks in dataloader:
        images = images.to(device)
        masks = masks.to(device)

        # Forward pass
        outputs = model(images)
        preds = torch.argmax(outputs, dim=1)

        # Flatten predictions and masks
        all_preds.extend(preds.cpu().numpy().flatten())
        all_masks.extend(masks.cpu().numpy().flatten())

# Compute the confusion matrix
cm = confusion_matrix(all_masks, all_preds)

# Plot the confusion matrix
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=range(11), yticklabels=range(11))
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")
plt.show()